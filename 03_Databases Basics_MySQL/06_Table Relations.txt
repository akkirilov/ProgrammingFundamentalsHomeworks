/*01_One-To- One Relationship*/
CREATE TABLE `persons` (
    `person_id` INT NOT NULL AUTO_INCREMENT UNIQUE,
    `first_name` VARCHAR(50) NOT NULL,
    `salary` DECIMAL(10,2),
    `passport_id` INT
);

CREATE TABLE `passports` (
    `passport_id` INT NOT NULL UNIQUE,
    `passport_number` VARCHAR(50) UNIQUE,
    CONSTRAINT `pk_passports` PRIMARY KEY (`passport_id`)
);

ALTER TABLE `persons`
MODIFY COLUMN `passport_id` INT UNIQUE,
ADD FOREIGN KEY `fk_persons_passports` (`passport_id`) REFERENCES `passports`(`passport_id`),
ADD PRIMARY KEY `pk_person_id` (`person_id`);

INSERT INTO `passports` (`passport_id`, `passport_number`) VALUES 
	(101, "N34FG21B"),
	(102, "K65LO4R7"),
    (103, "ZE657QP2");
    
INSERT INTO `persons` (`first_name` ,`salary`, `passport_id`) VALUES
	('Roberto', 43300.00, 102),
	('Tom', 56100.00, 103),
	('Yana', 60200.00, 101);
	
	
	
/*02_One-To- Many Relationship*/
CREATE TABLE `manufacturers` (
    `manufacturer_id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(50) NOT NULL,
    `established_on` DATE,
    CONSTRAINT `pk_manufacturers` PRIMARY KEY (`manufacturer_id`)
);

CREATE TABLE `models` (
    `model_id` INT NOT NULL AUTO_INCREMENT UNIQUE,
    `name` VARCHAR(50) NOT NULL,
    `manufacturer_id` INT,
    CONSTRAINT `pk_models` PRIMARY KEY (`model_id`),
    CONSTRAINT `fk_models_manufacturers` FOREIGN KEY (`manufacturer_id`)
        REFERENCES `manufacturers` (`manufacturer_id`)
);

INSERT INTO `manufacturers` (`manufacturer_id`, `name`, `established_on`) VALUES
	(1, 'BMW', '1916-03-01'),
	(2, 'Tesla', '2003-01-01'),
	(3, 'Lada', '1966-05-01');

INSERT INTO `models` (`model_id`, `name`, `manufacturer_id`) VALUES
	(101, 'X1', 1),
	(102, 'i6', 1),
	(103, 'Model S', 2),
	(104, 'Model X', 2),
	(105, 'Model 3', 2),
	(106, 'Nova', 3);
	
	
	
/*03_Many-To-Many Relationship*/
CREATE TABLE `students` (
	`student_id` INT NOT NULL AUTO_INCREMENT, 
    `name` VARCHAR(50),
    CONSTRAINT `pk_students` PRIMARY KEY (`student_id`)
);

INSERT INTO `students` (`name`) VALUES 
	('Mila'),
	('Toni'),
	('Ron');

CREATE TABLE `exams` (
	`exam_id` INT NOT NULL,
    `name` VARCHAR(50),
    CONSTRAINT `pk_exams` PRIMARY KEY (`exam_id`)
);

INSERT INTO `exams` (`exam_id`, `name`) VALUES
	(101, 'Spring MVC'),
	(102, 'Neo4j'),
	(103, 'Oracle 11g');

CREATE TABLE `students_exams` (
	`student_id` INT,
    `exam_id` INT,
    CONSTRAINT PRIMARY KEY (`student_id`, `exam_id`),
    CONSTRAINT `fk_student_id_students` FOREIGN KEY (`student_id`)
		REFERENCES `students` (`student_id`),
	CONSTRAINT `fk_exam_id_exams` FOREIGN KEY (`exam_id`)
		REFERENCES `exams` (`exam_id`)
);

INSERT INTO `students_exams` VALUES 
	(1, 101),
    (1, 102),
    (2, 101),
    (3, 103),
    (2, 102),
    (2, 103);



/*04_Self-Referencing*/
CREATE TABLE `teachers` (
	`teacher_id` INT NOT NULL,
    `name` VARCHAR(50) NOT NULL, 
    `manager_id` INT,
    CONSTRAINT `pk_teachers` PRIMARY KEY (`teacher_id`),
    CONSTRAINT `uk_teacher_id` UNIQUE KEY (`teacher_id`),
    CONSTRAINT `fk_teacher_id_manager_id` FOREIGN KEY (`manager_id`)
		REFERENCES `teachers`(`teacher_id`)
);

INSERT INTO `teachers` (`teacher_id`, `name`, `manager_id`) VALUES
	(101, 'John', NULL),
    (105, 'Mark', 101),
    (106, 'Greta', 101),
	(102, 'Maya', 106),
	(103, 'Silvia', 106),
	(104, 'Ted', 105);
	
	
	
/*05_Online Store Database*/
CREATE TABLE `cities` (
	`city_id` INT(11) NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(50),
    CONSTRAINT `pk_cities` PRIMARY KEY (`city_id`)
);

CREATE TABLE `customers` (
	`customer_id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(50),
    `birthday` DATE,
    `city_id` INT,
    CONSTRAINT `pk_customers` PRIMARY KEY (`customer_id`),
    CONSTRAINT `fk_customers_city_id` FOREIGN KEY (`city_id`)
		REFERENCES `cities` (`city_id`)
);

CREATE TABLE `orders` (
	`order_id` INT NOT NULL AUTO_INCREMENT,
    `customer_id` INT,
    CONSTRAINT `pk_orders` PRIMARY KEY (`order_id`),
    CONSTRAINT `fk_orders_customer_id` FOREIGN KEY (`customer_id`)
		REFERENCES `customers` (`customer_id`)
);

CREATE TABLE `item_types` (
	`item_type_id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(50),
    CONSTRAINT `pk_item_types` PRIMARY KEY (`item_type_id`)
);

CREATE TABLE `items` (
	`item_id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(50),
    `item_type_id` INT,
    CONSTRAINT `pk_items` PRIMARY KEY (`item_id`),
    CONSTRAINT `fk_items_item_type_id` FOREIGN KEY (`item_type_id`)
		REFERENCES `item_types` (`item_type_id`)
);

CREATE TABLE `order_items` (
	`order_id` INT,
    `item_id` INT,
    CONSTRAINT `pk_order_items` PRIMARY KEY (`order_id`, `item_id`),
    CONSTRAINT `fk_order_items_order_id` FOREIGN KEY (`order_id`)
		REFERENCES `orders` (`order_id`),
	CONSTRAINT `fk_order_items_item_id` FOREIGN KEY (`item_id`)
		REFERENCES `items` (`item_id`)
);



/*06_University Database*/
CREATE TABLE `subjects` (
	`subject_id` INT NOT NULL AUTO_INCREMENT,
    `subject_name` VARCHAR(50),
    CONSTRAINT `pk_subjects` PRIMARY KEY (`subject_id`)
);

CREATE TABLE `majors` (
	`major_id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(50),
    CONSTRAINT `pk_majors` PRIMARY KEY (`major_id`)
);

CREATE TABLE `students` (
	`student_id` INT NOT NULL AUTO_INCREMENT,
    `student_number` VARCHAR(12),
    `student_name` VARCHAR(50),
    `major_id` INT,
    CONSTRAINT `pk_students` PRIMARY KEY (`student_id`),
    CONSTRAINT `fk_students_major_id` FOREIGN KEY (`major_id`)
		REFERENCES `majors` (`major_id`)
);

CREATE TABLE `agenda` (
	`student_id` INT,
    `subject_id` INT,
    CONSTRAINT `pk_agenda` PRIMARY KEY (`student_id`, `subject_id`),
    CONSTRAINT `fk_agenda_student_id` FOREIGN KEY (`student_id`)
		REFERENCES `students` (`student_id`),
	CONSTRAINT `fk_agenda_subject_id` FOREIGN KEY (`subject_id`)
		REFERENCES `subjects` (`subject_id`) 
);

CREATE TABLE `payments` (
	`payment_id` INT NOT NULL AUTO_INCREMENT,
    `payment_date` DATE,
    `payment_amount` DECIMAL (8, 2),
    `student_id` INT,
    CONSTRAINT `pk_payments` PRIMARY KEY (`payment_id`),
    CONSTRAINT `fk_payments_student_id` FOREIGN KEY (`student_id`)
		REFERENCES `students` (`student_id`)
);



/*07_SoftUni Design (Create an E/R Diagram)*/



/*08_Geography Design (Create an E/R Diagram)*/



/*09_Peaks in Rila*/
SELECT 
    `m`.`mountain_range`,
    `p`.`peak_name`,
    `p`.`elevation` AS `peak_elevation`
FROM
    `peaks` AS `p`
JOIN
    `mountains` AS `m` ON `p`.`mountain_id` = `m`.`id`
WHERE
    `m`.`mountain_range` = 'Rila'
ORDER BY `p`.`elevation` DESC;
