/*DATABASE EXAM 12 October 2016*/
/*Airport Management System*/
/*You have been assigned to work for the government, on the flight-tracking systems. 
You’ve been given access to the AMS Database, which you must modify in several ways 
in order for you to fulfill your assignment.*/

/*PREPARE DB*/
CREATE DATABASE `ams`;

USE `ams`;

CREATE TABLE towns (
	town_id INT,
	town_name VARCHAR(30) NOT NULL,
	CONSTRAINT PK_towns PRIMARY KEY(town_id)
);

CREATE TABLE airports (
	airport_id INT,
	airport_name VARCHAR(50) NOT NULL,
	town_id INT NOT NULL,
	CONSTRAINT PK_airports PRIMARY KEY(airport_id),
	CONSTRAINT FK_airports_towns FOREIGN KEY(town_id) REFERENCES towns(town_id)
);

CREATE TABLE airlines (
	airline_id INT,
	airline_name VARCHAR(30) NOT NULL,
	nationality VARCHAR(30) NOT NULL,
	rating INT DEFAULT 0,
	CONSTRAINT PK_airlines PRIMARY KEY(airline_id)
);

CREATE TABLE customers (
	customer_id INT,
	first_name VARCHAR(20) NOT NULL,
	last_name VARCHAR(20) NOT NULL,
	date_of_birth DATE NOT NULL,
	gender VARCHAR(1) NOT NULL CHECK (Gender='M' OR Gender='F'),
	home_town_id INT NOT NULL,
	CONSTRAINT PK_customers PRIMARY KEY(customer_id),
	CONSTRAINT FK_customers_towns FOREIGN KEY(home_town_id) REFERENCES towns(town_id)
);


INSERT INTO towns(town_id, town_name)
VALUES
(1, 'Sofia'),
(2, 'Moscow'),
(3, 'Los Angeles'),
(4, 'Athene'),
(5, 'New York');

INSERT INTO airports(airport_id, airport_name, town_id)
VALUES
(1, 'Sofia International Airport', 1),
(2, 'New York Airport', 5),
(3, 'Royals Airport', 1),
(4, 'Moscow Central Airport', 2);

INSERT INTO airlines(airline_id, airline_name, nationality, rating)
VALUES
(1, 'Royal Airline', 'Bulgarian', 200),
(2, 'Russia Airlines', 'Russian', 150),
(3, 'USA Airlines', 'American', 100),
(4, 'Dubai Airlines', 'Arabian', 149),
(5, 'South African Airlines', 'African', 50),
(6, 'Sofia Air', 'Bulgarian', 199),
(7, 'Bad Airlines', 'Bad', 10);

INSERT INTO customers(customer_id, first_name, last_name, date_of_birth, gender, home_town_id)
VALUES
(1, 'Cassidy', 'Isacc', '1997-10-20', 'F', 1),
(2, 'Jonathan', 'Half', '1983-03-22', 'M', 2),
(3, 'Zack', 'Cody', '1989-08-08', 'M', 4),
(4, 'Joseph', 'Priboi', '1950-01-01', 'M', 5),
(5, 'Ivy', 'Indigo', '1993-12-31', 'F', 1);







/*Section 1. Section 1: Data Definition*/
CREATE TABLE `flights` (
	`flight_id` INT NOT NULL,
	`departure_time` DATETIME NOT NULL,
    `arrival_time` DATETIME NOT NULL,
    `status` VARCHAR(9) NOT NULL,
    `origin_airport_id` INT,
    `destination_airport_id` INT,
    `airline_id` INT,
    CONSTRAINT `pk_flights` PRIMARY KEY (`flight_id`),
    CONSTRAINT `fk_flights_origin_airport_id` FOREIGN KEY (`origin_airport_id`)
		REFERENCES `airports` (`airport_id`),
	CONSTRAINT `fk_flights_destination_airport_id` FOREIGN KEY (`destination_airport_id`)
		REFERENCES `airports` (`airport_id`),
	CONSTRAINT `fk_flights_airline_id` FOREIGN KEY (`airline_id`)
		REFERENCES `airlines` (`airline_id`)
);

CREATE TABLE `tickets` (
	`ticket_id` INT NOT NULL,
    `price` DECIMAL(8, 2) NOT NULL,
    `class` VARCHAR(6) NOT NULL,
    `seat` VARCHAR(5) NOT NULL,
    `customer_id` INT,
    `flight_id` INT,
	CONSTRAINT `pk_tickets` PRIMARY KEY (`ticket_id`),
    CONSTRAINT `fk_tickets_customer_id` FOREIGN KEY (`customer_id`)
		REFERENCES `customers` (`customer_id`),
	CONSTRAINT `fk_tickets_flight_id` FOREIGN KEY (`flight_id`)
		REFERENCES `flights` (`flight_id`)
);







/*Section 2: Database Manipulations*/
/*01_Data Insertion*/
INSERT INTO `flights` (`flight_id`, `departure_time`, `arrival_time`, `status`, 
					`origin_airport_id`, `destination_airport_id`, `airline_id`) VALUES
(1, '2016-10-13 06:00:00', '2016-10-13 10:00:00', 'Delayed', 1, 4, 1),
(2, '2016-10-12 12:00:00', '2016-10-12 12:01:00', 'Departing', 1, 3, 2),
(3, '2016-10-14 15:00:00', '2016-10-20 04:00:00', 'Delayed', 4, 2, 4),
(4, '2016-10-12 13:24:00', '2016-10-12 16:31:00', 'Departing', 3, 1, 3),
(5, '2016-10-12 08:11:00', '2016-10-12 23:22:00', 'Departing', 4, 1, 1),
(6, '1995-06-21 12:30:00', '1995-06-22 20:30:00', 'Arrived', 2, 3, 5),
(7, '2016-10-12 23:34:00', '2016-10-13 03:00:00', 'Departing', 2, 4, 2),
(8, '2016-11-11 13:00:00', '2016-11-12 22:00:00', 'Delayed', 4, 3, 1),
(9, '2015-10-01 12:00:00', '2015-12-01 01:00:00', 'Arrived', 1, 2, 1),
(10,'2016-10-12 19:30:00', '2016-10-13 12:30:00', 'Departing', 2, 1, 7);

INSERT INTO `tickets` (`ticket_id`, `price`, `class`, `seat`, `customer_id`, `flight_id`) VALUES
(1,	3000.00, 'First', '233-A', 3, 8),
(2,	1799.90, 'Second', '123-D', 1, 1),
(3,	1200.50, 'Second', '12-Z', 2, 5),
(4,	410.68, 'Third', '45-Q', 2, 8),
(5,	560.00, 'Third', '201-R', 4, 6),
(6,	2100.00, 'Second', '13-T', 1, 9),
(7,	5500.00, 'First	', '98-O', 2, 7);







/*02_Update Flights*/
UPDATE `flights` 
SET 
    `airline_id` = 1
WHERE
    `status` = 'Arrived';
	
	
	
	
	
	
	
/*03_Update Tickets*/
UPDATE 
	`tickets` 
SET `price` = `price` * 1.5 
WHERE `flight_id` IN 
	(SELECT
		`fa`.`flight_id`
	FROM
		(SELECT 
			`t`.`flight_id`, `a`.`airline_id`
		FROM
			`flights` AS `f`
			JOIN
			`tickets` AS `t`
			ON
			`t`.`flight_id` = `f`.`flight_id`
			JOIN
			`airlines` AS `a`
			ON
			`f`.`airline_id` = `a`.`airline_id`) AS `fa`
		JOIN 
		(SELECT
			`a`.`airline_id`, MAX(`a`.`rating`)
		FROM 
			`airlines` AS `a`) AS `max`
		ON `fa`.`airline_id` = `max`.`airline_id`);
		
		
		
		
		
		
		
/*04_Table Creation*/
CREATE TABLE `customer_reviews` (
	`review_id` INT NOT NULL,
	`review_content` VARCHAR(255) NOT NULL,
    `review_grade` INT,
    `airline_id` INT,
    `customer_id` INT,
    CONSTRAINT `pk_customer_reviews` PRIMARY KEY (`review_id`),
    CONSTRAINT `fk_customer_reviews_airline_id` FOREIGN KEY (`airline_id`)
		REFERENCES `airlines` (`airline_id`),
	CONSTRAINT `fk_customer_reviews_customer_id` FOREIGN KEY (`customer_id`)
		REFERENCES `customers` (`customer_id`)
);

CREATE TABLE `customer_bank_accounts` (
	`account_id` INT NOT NULL,
    `account_number` VARCHAR(10) UNIQUE,
    `balance` DECIMAL(10, 2) NOT NULL,
    `customer_id` INT,
    CONSTRAINT `pk_customer_bank_accounts` PRIMARY KEY (`account_id`),
	CONSTRAINT `fk_customer_bank_accounts_customer_id` FOREIGN KEY (`customer_id`)
		REFERENCES `customers` (`customer_id`)
);







/*05_Fillin New Tables*/
INSERT INTO `customer_reviews` (`review_id`, `review_content`, `review_grade`, 
								`airline_id`, `customer_id`) VALUES
(1, 'Me is very happy. Me likey this airline. Me good.', 10, 1, 1),
(2, 'Ja, Ja, Ja... Ja, Gut, Gut, Ja Gut! Sehr Gut!', 10, 1, 4),
(3, 'Meh...',  5, 4, 3),
(4, 'Well Ive seen better, but Ive certainly seen a lot worse...',  7, 3, 5);

INSERT INTO `customer_bank_accounts` (`account_id`, `account_number`, 
								`balance`, `customer_id`) VALUES
(1,	'123456790', 2569.23, 1),
(2,	'18ABC23672', 14004568.23, 2),
(3,	'F0RG0100N3', 19345.20,	5);






/*Section 3: Querying*/
/*01_Extract All Tickets*/
SELECT 
    `ticket_id`, `price`, `class`, `seat`
FROM
    `tickets`
ORDER BY `ticket_id` ASC;







/*02_Extract All Customers*/
SELECT 
	`customer_id`, 
    CONCAT(`first_name`, ' ', `last_name`) AS `full_name`,
    `gender`
FROM
	`customers`
ORDER BY `full_name` ASC, `customer_id`;







/*03_Extract Delayed Flights*/
SELECT 
	`flight_id`, `departure_time`, `arrival_time`
FROM 
	`flights`
WHERE `status` = 'Delayed'
ORDER BY `flight_id` ASC;







/*04_Top 5 Airlines*/
SELECT
	`a`.`airline_id`, `a`.`airline_name`, `a`.`nationality`, `a`.`rating`
FROM
	`airlines` AS `a`
    INNER JOIN
    `flights` AS `f`
    ON
    `f`.`airline_id` = `a`.`airline_id`
GROUP BY `a`.`airline_id`
ORDER BY `rating` DESC, `airline_id` ASC
LIMIT 5;







/*05_All Tickets Below 5000*/
SELECT
	`t`.`ticket_id`, 
    `a`.`airport_name` AS `destination`,
    CONCAT(`c`.`first_name`, ' ', `c`.`last_name`)AS `customer_name`
    
FROM
	`tickets` AS `t`
    JOIN
    `customers` AS `c`
    ON 
    `t`.`customer_id` = `c`.`customer_id`
    JOIN
    `flights` AS `f`
    ON
    `f`.`flight_id` = `t`.`flight_id`
    JOIN
    `airports` AS `a`
    ON
    `a`.`airport_id` = `f`.`destination_airport_id`
WHERE `t`.`price` < 5000 AND `t`.`class` = 'First'
ORDER BY `t`.`ticket_id` ASC;







/*06_Customers From Home*/
SELECT DISTINCT
	`c`.`customer_id`, 
    CONCAT(`c`.`first_name`, ' ', `c`.`last_name`) AS `full_name`,
    `to`.`town_name` AS `home_town`
FROM
	`customers` AS `c`
    JOIN
    `tickets` AS `t`
    ON 
    `t`.`customer_id` = `c`.`customer_id`
    JOIN
    `flights` AS `f`
    ON
    `f`.`flight_id` = `t`.`flight_id`
    JOIN
    `airports` AS `a`
    ON
    `a`.`airport_id` = `f`.`origin_airport_id`
    JOIN
    `towns` AS `to`
    ON
    `to`.`town_id` = `a`.`town_id` 
WHERE `c`.`home_town_id` = `to`.`town_id` AND `f`.`status` = 'Departing'
ORDER BY `c`.`customer_id` ASC;







/*07_Customers who will fly*/
SELECT DISTINCT
	`c`.`customer_id`, 
    CONCAT(`c`.`first_name`, ' ', `c`.`last_name`) AS `full_name`,
    (2016 - YEAR(`c`.`date_of_birth`)) AS `age`
FROM
	`customers` AS `c`
    JOIN
    `tickets` AS `t`
    ON 
    `t`.`customer_id` = `c`.`customer_id`
    JOIN
    `flights` AS `f`
    ON
    `f`.`flight_id` = `t`.`flight_id`
WHERE `f`.`status` = 'Departing'
ORDER BY `age` ASC, `c`.`customer_id` ASC;







/*08_Extract Top 3 Customers which have Delayed Flights*/
SELECT DISTINCT
	`c`.`customer_id`, 
    CONCAT(`c`.`first_name`, ' ', `c`.`last_name`) AS `full_name`,
    `t`.`price` AS `ticket_price`,
    `a`.`airport_name`
FROM
	`customers` AS `c`
    JOIN
    `tickets` AS `t`
    ON 
    `t`.`customer_id` = `c`.`customer_id`
    JOIN
    `flights` AS `f`
    ON
    `f`.`flight_id` = `t`.`flight_id`
    JOIN
    `airports` AS `a`
    ON
    `a`.`airport_id` = `f`.`destination_airport_id`
    JOIN
    `towns` AS `to`
    ON
    `to`.`town_id` = `a`.`town_id` 
WHERE `f`.`status` = 'Delayed'
ORDER BY `t`.`price` DESC, `c`.`customer_id` ASC
LIMIT 3;







/*09_Last 5 Departing Flights*/
SELECT
	`l`.`flight_id`, 
    `l`.`departure_time`, 
    `l`.`arrival_time`, 
    `l`.`origin`,
    `l`.`destination`
FROM
	(SELECT
		`f`.`flight_id`, 
		`f`.`departure_time`, 
		`f`.`arrival_time`, 
		`ao`.`airport_name` AS `origin`,
		`ad`.`airport_name` AS `destination`
	FROM
		`flights` AS `f`
		JOIN
		`airports` AS `ao`
		ON `ao`.`airport_id` = `f`.`origin_airport_id`
		JOIN
		`airports` AS `ad`
		ON `ad`.`airport_id` = `f`.`destination_airport_id`
	WHERE `f`.`status` = 'Departing'
	ORDER BY `departure_time` DESC, `f`.`flight_id` DESC
	LIMIT 5) AS `l`
ORDER BY `l`.`departure_time` ASC, `l`.`flight_id` ASC;







/*10_Customers Below 21*/
SELECT DISTINCT
	`c`.`customer_id`, 
    CONCAT(`c`.`first_name`, ' ', `c`.`last_name`) AS `full_name`,
    (2016 - YEAR(`c`.`date_of_birth`)) AS `age`
FROM
	`customers` AS `c`
    JOIN
    `tickets` AS `t`
    ON 
    `t`.`customer_id` = `c`.`customer_id`
    JOIN
    `flights` AS `f`
    ON
    `f`.`flight_id` = `t`.`flight_id`
WHERE `f`.`status` = 'Arrived' AND (2016 - YEAR(`c`.`date_of_birth`)) < 21
ORDER BY `age` DESC, `c`.`customer_id` ASC;







/*11_AIrports and Passengers*/
SELECT
	`a`.`airport_id`, `a`.`airport_name`, COUNT(*) AS `passengers`
FROM
	`flights` AS `f`
    JOIN
    `airports` AS `a`
    ON
    `f`.`origin_airport_id` = `a`.`airport_id`
	JOIN
    `tickets` AS `t`
    ON
    `t`.`flight_id` = `f`.`flight_id`
    JOIN
    `customers` AS `c`
    ON
    `c`.`customer_id` = `t`.`customer_id`
WHERE `f`.`status` = 'Departing'
GROUP BY `a`.`airport_id`
ORDER BY `a`.`airport_id` ASC;






/*Section 4: Programmability*/
/*01_Submit Review*/
CREATE PROCEDURE `usp_submit_review`(customer_id INT, review_content VARCHAR(255), 
										review_grade INT, airline_name VARCHAR(30))
BEGIN
    DECLARE airline_id INT;
    DECLARE review_id INT;
    SET airline_id := (SELECT `a`.`airline_id` FROM `airlines` AS `a` 
							WHERE `a`.`airline_name` = airline_name LIMIT 1);
    SET review_id := last_insert_id() + 1;
    
    
    START TRANSACTION;
    INSERT INTO `customer_reviews` (`review_id`, `review_content`, `review_grade`, 
									`airline_id`, `customer_id`) VALUES
	(review_id, review_content, review_grade, airline_id, customer_id);
    
    IF (airline_id IS NULL) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Airline does not exist.'; 
        ROLLBACK;
	ELSE
		COMMIT;
	END IF;
END







/*02_Ticket Purchase*/
CREATE PROCEDURE `usp_purchase_ticket`(customer_id INT, flight_id INT, 
										ticket_price DECIMAL(10, 2), class VARCHAR(6), 
                                        seat VARCHAR(5))
BEGIN
	DECLARE balance DECIMAL;
    DECLARE lid INT;
    
    SET balance := (SELECT `cba`.`balance` 
						FROM `customer_bank_accounts` AS `cba` 
                        WHERE `cba`.`customer_id` = customer_id 
                        ORDER BY `cba`.`balance` DESC LIMIT 1);
                        
	SET lid := (SELECT `t`.`ticket_id` + 1
					FROM `tickets` AS `t`
                    ORDER BY `t`.`ticket_id` DESC LIMIT 1);
                    
	SET autocommit = 0;
    START TRANSACTION;
		INSERT INTO `tickets` (`ticket_id`, `price`, `class`, `seat`, 
								`customer_id`, `flight_id`) VALUES 
		(lid, ticket_price, class, seat, customer_id, flight_id);
        
        UPDATE `customer_bank_accounts` 
		SET `customer_bank_accounts`.`balance` = `customer_bank_accounts`.`balance` - ticket_price
		WHERE `customer_bank_accounts`.`customer_id` = customer_id;
        
        IF (balance < ticket_price OR balance < 0 OR balance IS NULL) THEN
			ROLLBACK;
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Insufficient bank account balance for ticket purchase.';
		ELSE
			COMMIT;
		END IF;
    SET autocommit = 1;
END







/*Section 5 (BONUS)*/

CREATE TABLE `arrived_flights` (
	`flight_id` INT NOT NULL,
	`arrival_time` DATETIME NOT NULL,
	`origin` VARCHAR(50),
	`destination` VARCHAR(50),
	`passengers` INT NOT NULL,
    CONSTRAINT `pk_arrived_flights` PRIMARY KEY (`flight_id`)
);

/*01_Update Trigger*/
CREATE TRIGGER `tr_arrived_flights` 
AFTER UPDATE ON `flights`
FOR EACH ROW
BEGIN 
    DECLARE origin VARCHAR(50);
    DECLARE destination VARCHAR(50);
    DECLARE passengers INT;
    
    SET origin := (SELECT `a`.`airport_name` FROM `airports` AS `a`
					WHERE NEW.`origin_airport_id` = `a`.`airport_id`);
	SET destination := (SELECT `a`.`airport_name` FROM `airports` AS `a`
					WHERE NEW.`destination_airport_id` = `a`.`airport_id`);
	SET passengers := (SELECT COUNT(*) FROM `tickets` AS `t` 
					WHERE `t`.`flight_id` = NEW.`flight_id`);
   
	IF (NEW.status = 'Arrived') THEN
		INSERT INTO `arrived_flights` (`flight_id`, `arrival_time`, `origin`,
										`destination`, `passengers`) VALUES
		(NEW.`flight_id`, NEW.`arrival_time`, origin, destination, passengers);
    END IF;	
END
