/*Prepare DB*/

CREATE DATABASE `bank_db`;

USE `bank_db`;

-- Dumping structure for table bank.accounts
DROP TABLE IF EXISTS `accounts`;
CREATE TABLE IF NOT EXISTS `accounts` (
  `id` int(11) NOT NULL,
  `account_holder_id` int(11) NOT NULL,
  `balance` decimal(19,4) DEFAULT '0.0000',
  PRIMARY KEY (`id`),
  KEY `fk_accounts_account_holders` (`account_holder_id`),
  CONSTRAINT `fk_accounts_account_holders` FOREIGN KEY (`account_holder_id`) REFERENCES `account_holders` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table bank.accounts: ~18 rows (approximately)
/*!40000 ALTER TABLE `accounts` DISABLE KEYS */;
INSERT INTO `accounts` (`id`, `account_holder_id`, `balance`) VALUES
	(1, 1, 123.1200),
	(2, 3, 4354.2300),
	(3, 12, 6546543.2300),
	(4, 9, 15345.6400),
	(5, 11, 36521.2000),
	(6, 8, 5436.3400),
	(7, 10, 565649.2000),
	(8, 11, 999453.5000),
	(9, 1, 5349758.2300),
	(10, 2, 543.3000),
	(11, 3, 10.2000),
	(12, 7, 245656.2300),
	(13, 5, 5435.3200),
	(14, 4, 1.2300),
	(15, 6, 0.1900),
	(16, 2, 5345.3400),
	(17, 11, 76653.2000),
	(18, 1, 235469.8900);
/*!40000 ALTER TABLE `accounts` ENABLE KEYS */;


-- Dumping structure for table bank.account_holders
DROP TABLE IF EXISTS `account_holders`;
CREATE TABLE IF NOT EXISTS `account_holders` (
  `id` int(11) NOT NULL,
  `first_name` varchar(50) NOT NULL,
  `last_name` varchar(50) NOT NULL,
  `ssn` char(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- Dumping data for table bank.account_holders: ~12 rows (approximately)
/*!40000 ALTER TABLE `account_holders` DISABLE KEYS */;
INSERT INTO `account_holders` (`id`, `first_name`, `last_name`, `ssn`) VALUES
	(1, 'Susan', 'Cane', '1234567890'),
	(2, 'Kim', 'Novac', '1234567890'),
	(3, 'Jimmy', 'Henderson', '1234567890'),
	(4, 'Steve', 'Stevenson', '1234567890'),
	(5, 'Bjorn', 'Sweden', '1234567890'),
	(6, 'Kiril', 'Petrov', '1234567890'),
	(7, 'Petar', 'Kirilov', '1234567890'),
	(8, 'Michka', 'Tsekova', '1234567890'),
	(9, 'Zlatina', 'Pateva', '1234567890'),
	(10, 'Monika', 'Miteva', '1234567890'),
	(11, 'Zlatko', 'Zlatyov', '1234567890'),
	(12, 'Petko', 'Petkov Junior', '1234567890');
/*!40000 ALTER TABLE `account_holders` ENABLE KEYS */;







/*Part I – Queries for SoftUni Database*/

/*01_Employees with Salary Above 35000*/
CREATE PROCEDURE `usp_get_employees_salary_above_35000` ()
BEGIN
	SELECT 
		`e`.`first_name`, `e`.`last_name` 
    FROM 
		`employees` AS `e`
	WHERE `e`.`salary` > 35000
    ORDER BY `e`.`first_name` ASC, `e`.`last_name` ASC;
END 



/*02_Employees with Salary Above Number*/
CREATE PROCEDURE `usp_get_employees_salary_above` (salary DECIMAL(19, 4))
BEGIN
	SELECT 
		`e`.`first_name`, `e`.`last_name` 
    FROM 
		`employees` AS `e`
	WHERE `e`.`salary` >= salary
    ORDER BY `e`.`first_name` ASC, `e`.`last_name` ASC;
END



/*03_Town Names Starting With*/
CREATE PROCEDURE `usp_get_towns_starting_with` (str VARCHAR(50))
BEGIN
	DECLARE cut INT;
    SET cut := CHAR_LENGTH(str);
    
    SELECT 
		`t`.`name` AS `town_name`
	FROM
		`towns` AS `t`
	WHERE LEFT(`t`.`name`, cut) = str
    ORDER BY `t`.`name` ASC;
END



/*04_Employees from Town*/
CREATE PROCEDURE `usp_get_employees_from_town` (town_name VARCHAR(50))
BEGIN
	SELECT 
		`e`.`first_name`, `e`.`last_name` 
    FROM 
		`employees` AS `e`
        JOIN
        `addresses` AS `a`
        ON
        `a`.`address_id` = `e`.`address_id`
        JOIN
        `towns` AS `t`
        ON
        `t`.`town_id` = `a`.`town_id`
	WHERE `t`.`name` = town_name
    ORDER BY `e`.`first_name` ASC, `e`.`last_name` ASC;
END



/*05_Salary Level Function*/
CREATE FUNCTION `ufn_get_salary_level` (e_salary DECIMAL(19, 4))
RETURNS VARCHAR(10)
BEGIN
	DECLARE s_level VARCHAR(10);
    
    IF (e_salary < 30000) THEN
		SET s_level := 'Low';
	ELSEIF (e_salary <= 50000) THEN
		SET s_level := 'Average';
    ELSE
		SET s_level := 'High';
    END IF;
    
    RETURN s_level;  
END



/*06_Employees by Salary Level*/
CREATE PROCEDURE `usp_get_employees_by_salary_level` (s_level VARCHAR(10))
BEGIN
	DECLARE p_min INT;
	DECLARE p_max INT;
	
    IF (s_level = 'Low') THEN
		SET p_min := 0;
        SET p_max := 29999;
	ELSEIF (s_level = 'Average') THEN
		SET p_min := 30000;
        SET p_max := 50000;
	ELSEIF (s_level = 'High') THEN 
		SET p_min := 50001;
        SET p_max := 2100000000;
	END IF;
 
	SELECT
		`e`.`first_name`, `e`.`last_name`
	FROM
		`employees` AS `e`
	WHERE `e`.`salary` >= p_min AND `e`.`salary` <= p_max
    ORDER BY `e`.`first_name` DESC, `e`.`last_name` DESC;
END 



/*07_Define Function*/
CREATE FUNCTION `ufn_is_word_comprised`(set_of_letters VARCHAR(255), word VARCHAR(255))
RETURNS BOOL
BEGIN
	DECLARE is_match BOOL;
	DECLARE i_set INT;
    DECLARE i_word INT;
    DECLARE len_set INT;
    DECLARE len_word INT;
    DECLARE ch_set CHAR;
    DECLARE ch_word CHAR;
    SET i_word := 1;
	SET len_set := CHAR_LENGTH(set_of_letters);
    SET len_word := CHAR_LENGTH(word);
    
    WHILE (i_word <= len_word) DO
		SET is_match := FALSE;
		SET ch_word = SUBSTR(word, i_word, 1);
		SET i_set := 1;
		WHILE (i_set <= len_set) DO
			SET ch_set = SUBSTR(set_of_letters, i_set, 1);
            IF (ch_set = ch_word) THEN
				SET is_match := TRUE;
                SET i_set := len_set + 1;
            END IF;
			SET i_set := i_set + 1;
		END WHILE;
        IF (is_match = FALSE) THEN
				RETURN FALSE;
            END IF;
		SET i_word := i_word + 1;
    END WHILE;
    
    RETURN TRUE; 
END



/*08_Delete Employees and Departments*/
START TRANSACTION;

CREATE TABLE IF NOT EXISTS `to_be_delete` 
	(SELECT `e`.`employee_id` FROM `employees` AS `e` 
		WHERE `e`.`department_id` IN (SELECT `d`.`department_id` 
			FROM `departments` AS `d` 
			WHERE  `d`.`name` IN ('Production', 'Production Control')));

UPDATE `employees` 
SET `manager_id` = NULL 
WHERE `manager_id` IN (SELECT * FROM `to_be_delete`);

UPDATE `departments` 
SET `manager_id` = 2 
WHERE `manager_id` IN (SELECT * FROM `to_be_delete`);

DELETE FROM `employees_projects` 
WHERE `employee_id` IN (SELECT * FROM `to_be_delete`);

DELETE FROM `employees` 
WHERE `employee_id` IN (SELECT * FROM `to_be_delete`);

DELETE FROM `departments` 
WHERE `name` IN ('Production', 'Production Control');

ROLLBACK;







/*PART II – Queries for Bank Database*/

/*09_Find Full Name*/
CREATE PROCEDURE `usp_get_holders_full_name`()
BEGIN
	SELECT 
		CONCAT(`a`.`first_name`, ' ', `a`.`last_name`) AS `full_name`
	FROM
		`account_holders` AS `a`
	ORDER BY `full_name` ASC;
END



/*10_People with Balance Higher Than*/
CREATE PROCEDURE `usp_get_holders_with_balance_higher_than`(amount DECIMAL(19, 4))
BEGIN
	SELECT 
		`f`.`first_name`, `f`.`last_name`
    FROM
		(SELECT 
			`ah`.`first_name`, `ah`.`last_name`, SUM(`a`.`balance`) AS `sum`
		FROM
			`accounts` AS `a`
			JOIN
			`account_holders` AS `ah`
			ON
			`a`.`account_holder_id` = `ah`.`id`
		GROUP BY `a`.`account_holder_id`) AS `f`
	WHERE `f`.`sum` > amount
    ORDER BY `f`.`first_name` ASC, `f`.`last_name` ASC;	
END



/*11_Future Value Function*/
CREATE FUNCTION `ufn_calculate_future_value` (amount DECIMAL(19, 4), interest_rate DECIMAL(19, 4), years INT)
RETURNS DECIMAL(19, 2)
BEGIN
    DECLARE i INT;
    SET i := 0;
    
    WHILE (i < years) DO
		SET amount := (amount * interest_rate) + amount;
		SET i := i + 1;
    END WHILE;
    
    RETURN amount;
END 



/*12_Calculating Interest*/
CREATE FUNCTION `ufn_calculate_future_value`(amount DECIMAL(19, 10), interest_rate DECIMAL(19, 10), years INT)
RETURNS DECIMAL(19, 4)
BEGIN
    DECLARE i INT;
    SET i := 0;
    SET interest_rate := ROUND(interest_rate, 4);
    
    IF (amount <= 0) THEN
      	RETURN 0;
	ELSEIF (interest_rate <= 0) THEN
		RETURN amount;
	END IF;
    
    WHILE (i < years) DO
      	SET amount := (amount * interest_rate) + amount;
      	SET i := i + 1;
    END WHILE;
    
    RETURN ROUND(amount, 4);
END;

CREATE PROCEDURE `usp_calculate_future_value_for_account`(account_id INT, interest DECIMAL(19, 10))
BEGIN
    SELECT 
      	`a`.`id` AS `acount_id`, 
      	`ah`.`first_name`, 
      	`ah`.`last_name`, 
      	`a`.`balance` AS `current_balance`, 
      	ufn_calculate_future_value(`a`.`balance`, interest, 5) AS `balance_in_5_years`
    FROM
      	`accounts` AS `a`
      	JOIN
      	`account_holders` AS `ah`
      	ON
      	`a`.`account_holder_id` = `ah`.`id`
    WHERE `a`.`id` = account_id;        
END;



/*13_Deposit Money*/
CREATE PROCEDURE usp_deposit_money (account_id INT, money_amount DECIMAL(19, 10))
BEGIN
    SET money_amount := ROUND(money_amount, 4);

    START TRANSACTION;
    
    UPDATE `accounts` AS `a`
    SET `a`.`balance` = `a`.`balance` + money_amount
    WHERE `a`.`id` = account_id;
    
    IF (money_amount <= 0) THEN
	ROLLBACK;
    ELSE
	COMMIT;
    END IF;
END



/*14_Withdraw Money*/
CREATE PROCEDURE usp_withdraw_money(account_id INT, money_amount DECIMAL(19, 10))
BEGIN
    SET money_amount := ROUND(money_amount, 4);
	
    START TRANSACTION;
    
    UPDATE `accounts` AS `a`
    SET `a`.`balance` = `a`.`balance` - money_amount
	WHERE `a`.`id` = account_id;
    
    IF (money_amount <= 0 
			OR (SELECT `balance` FROM `accounts` 
            WHERE `accounts`.`id` = account_id) < 0) THEN
        ROLLBACK;
    ELSE
        COMMIT;
    END IF;
END



/*15_Money Transfer*/
CREATE PROCEDURE usp_transfer_money(from_account_id INT, to_account_id INT, amount DECIMAL(19, 10))
BEGIN
    SET amount := ROUND(amount, 4);
	
    START TRANSACTION;
    
    UPDATE `accounts` AS `a`
	SET `a`.`balance` = `a`.`balance` - amount
	WHERE `a`.`id` = from_account_id;
        
	UPDATE `accounts` AS `a`
	SET `a`.`balance` = `a`.`balance` + amount
	WHERE `a`.`id` = to_account_id;
        
    IF (from_account_id != to_account_id 
	AND amount > 0 
	AND (SELECT `balance` FROM `accounts` 
            WHERE `accounts`.`id` = from_account_id) > 0
        AND (SELECT `accounts`.`id` FROM `accounts` 
            WHERE `accounts`.`id` = from_account_id)
        AND (SELECT `accounts`.`id` FROM `accounts` 
            WHERE `accounts`.`id` = to_account_id)) THEN
	COMMIT;
    ELSE
        ROLLBACK;
    END IF;   
END



/*16_Log Accounts Trigger*/
CREATE TABLE `logs` (
    `log_id` INT NOT NULL AUTO_INCREMENT, 
    `account_id` INT, 
    `old_sum` DECIMAL(19, 4), 
    `new_sum` DECIMAL(19, 4),
    CONSTRAINT `pk_logs` PRIMARY KEY (`log_id`),
    CONSTRAINT `fk_logs_account_id` FOREIGN KEY (`account_id`)
        REFERENCES `accounts` (`id`)
);

CREATE TRIGGER tr_account_change_balance
AFTER UPDATE
ON `accounts`
FOR EACH ROW
BEGIN
    INSERT INTO `logs` (`account_id`, `old_sum`, `new_sum`) VALUES
    (NEW.`id`, OLD.`balance`, NEW.`balance`);
END;



/*17_Emails Trigger*/
CREATE TABLE `logs` (
    `log_id` INT NOT NULL AUTO_INCREMENT, 
    `account_id` INT, 
    `old_sum` DECIMAL(19, 4), 
    `new_sum` DECIMAL(19, 4),
    CONSTRAINT `pk_logs` PRIMARY KEY (`log_id`),
    CONSTRAINT `fk_logs_account_id` FOREIGN KEY (`account_id`)
        REFERENCES `accounts` (`id`)
);

CREATE TRIGGER tr_account_change_balance
AFTER UPDATE
ON `accounts`
FOR EACH ROW
BEGIN
    INSERT INTO `logs` (`account_id`, `old_sum`, `new_sum`) VALUES
    (NEW.`id`, OLD.`balance`, NEW.`balance`);
END;

CREATE TABLE `notification_emails`(
    `id` INT NOT NULL AUTO_INCREMENT,
    `recipient` INT NOT NULL,
    `subject` VARCHAR(100), 
    `body` TEXT NOT NULL,
    CONSTRAINT `pk_notification_emails` PRIMARY KEY (`id`)
);

CREATE TRIGGER tr_change_balance
AFTER INSERT
ON `logs`
FOR EACH ROW
BEGIN
    DECLARE lid INT;
    DECLARE recipient INT;
    DECLARE old_sum DECIMAL(19, 4);
    DECLARE new_sum DECIMAL(19, 4);
    DECLARE e_subject VARCHAR(100);
    DECLARE body TEXT;
    
    SET lid := (SELECT `l`.`log_id` FROM `logs` AS `l`
		ORDER BY `l`.`log_id` DESC LIMIT 1);
    SET recipient := (SELECT `l`.`account_id` FROM `logs` AS `l`
		    WHERE `l`.`log_id` = lid);
    SET old_sum := (SELECT `l`.`old_sum` FROM `logs` AS `l`
		    WHERE `l`.`log_id` = lid);
    SET new_sum := (SELECT `l`.`new_sum` FROM `logs` AS `l`
		    WHERE `l`.`log_id` = lid);
    SET e_subject := CONCAT('Balance change for account: ', recipient);
    SET body := CONCAT('On ', DATE_FORMAT(NOW(), '%b %d %Y at %r'), ' your balance was 
                        changed from ', old_sum , ' to ', new_sum, '.');
    
    INSERT INTO `notification_emails` (`recipient`, `subject`, `body`) VALUES
    (recipient, e_subject, body);  
END;



/*PART III – Queries for Diablo Database*/

/*18_Massive Shopping*/







